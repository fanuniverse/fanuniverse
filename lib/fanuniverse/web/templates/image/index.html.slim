elixir:
  heading = case @conn.params["q"] do
    empty when empty in [nil, ""] -> "Images"
    query -> "Searching for #{query}"
  end

.js-grid-container.invisible

  .media-grid-header.js-grid-header
    h1 = heading

    .image-sort-dropdown.js-dropdown
      - {{current_label, _, _}, rest} = image_sort_options(@conn)
      a.js-dropdown__toggle href="#"
        = current_label
        span
          i.fa.fa-caret-down<
      .js-dropdown__content.hidden
        = Enum.map rest, fn({key, {label, _, _}}) ->
          a href=image_path(@conn, :index, q: @conn.params["q"], sort: key)
            = label

    = if Enum.any?(@images) do
      p Pagination
    - else
      p No images found

  .media-grid.js-grid
    = for image <- @images do
      - image_show_link = image_path(@conn, :show, image.id, Map.take(@conn.params, ["q", "sort"]))
      .media.block.js-grid__item
        / Meta links
        a.meta data-starrable="Image" data-starrable-id=image.id title="Star this image!" href="#"
          i.fa.fa-star>
          span.meta__count= image.stars_count
        a.meta href="#{image_show_link}#comments"
          i.fa.fa-comments>
          span.meta__count= image.comments_count
        = if animated?(image) do
          / Animated image
          .video-container.js-video
            a.media__link href=image_show_link title=image.tags
              .video-container__overlay.js-video__controls
                section
                  i.fa.fa-play
                  br
                  span.js-video__state Animated
              video.video-container__video.media__video(loop muted playsinline preload="none" poster=version_url(image, "poster", "jpg"))
                source src=version_url(image, "rendered", "webm") type="video/webm"
                source src=version_url(image, "rendered", "mp4") type="video/mp4"
                img src=version_url(image, "poster", "jpg")
        - else
          / Still image
          a.media__link href=image_show_link title=image.tags
            img src=version_url(image, "thumbnail")
        // Source
        a.meta.meta--bottom.meta--text-overflow href=image.source
          i.fa.fa-retweet>
          span= short_source(image)
